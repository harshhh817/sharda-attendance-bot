#!/usr/bin/env python3
"""
Setup script for Sharda Attendance Bot
Helps users configure their settings easily
"""

import os
import sys
import subprocess

def print_banner():
    print("=" * 60)
    print("🎓 Sharda University Attendance Bot Setup")
    print("=" * 60)
    print()

def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 7):
        print("❌ Python 3.7 or higher is required!")
        print(f"Current version: {sys.version}")
        return False
    print(f"✅ Python version: {sys.version.split()[0]}")
    return True

def install_dependencies():
    """Install required packages"""
    print("\n📦 Installing dependencies...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
        print("✅ Dependencies installed successfully!")
        return True
    except subprocess.CalledProcessError:
        print("❌ Failed to install dependencies!")
        return False

def get_user_input():
    """Get configuration from user"""
    print("\n🔧 Configuration Setup")
    print("-" * 30)
    
    config = {}
    
    # System ID
    config['SYSTEM_ID'] = input("Enter your Sharda System ID: ").strip()
    
    # Gmail settings
    config['GMAIL_USER'] = input("Enter your Gmail address: ").strip()
    print("\n📧 Gmail App Password Setup:")
    print("1. Go to https://myaccount.google.com/security")
    print("2. Enable 2-Factor Authentication if not already enabled")
    print("3. Go to 'App passwords' and generate one for 'Mail'")
    print("4. Use that password below (not your regular Gmail password)")
    config['GMAIL_PASSWORD'] = input("Enter your Gmail App Password: ").strip()
    
    # Telegram settings
    print("\n🤖 Telegram Bot Setup:")
    print("1. Message @BotFather on Telegram")
    print("2. Send /newbot and follow instructions")
    print("3. Copy the bot token below")
    config['TELEGRAM_BOT_TOKEN'] = input("Enter your Telegram Bot Token: ").strip()
    
    print("\n👤 Telegram Chat ID Setup:")
    print("1. Start a chat with your bot")
    print("2. Message @userinfobot to get your chat ID")
    config['TELEGRAM_CHAT_ID'] = input("Enter your Telegram Chat ID: ").strip()
    
    return config

def create_config_file(config):
    """Create config.py with user settings"""
    config_content = f'''# Configuration for Sharda Attendance Bot
# Generated by setup.py

# Sharda University System ID
SYSTEM_ID = "{config['SYSTEM_ID']}"

# Gmail credentials for OTP retrieval
GMAIL_USER = "{config['GMAIL_USER']}"
GMAIL_PASSWORD = "{config['GMAIL_PASSWORD']}"

# Telegram Bot Configuration
TELEGRAM_BOT_TOKEN = "{config['TELEGRAM_BOT_TOKEN']}"
TELEGRAM_CHAT_ID = "{config['TELEGRAM_CHAT_ID']}"

# Bot behavior settings
BOT_NAME = "Sharda Attendance Bot"
AUTHORIZED_USERS = [TELEGRAM_CHAT_ID]
SEND_SCREENSHOTS = True
SCREENSHOT_QUALITY = "high"

# Timing settings
LOGIN_TIMEOUT = 30
OTP_TIMEOUT = 60
PAGE_LOAD_TIMEOUT = 20
'''
    
    with open('config.py', 'w') as f:
        f.write(config_content)
    
    print("✅ Configuration file created: config.py")

def update_script_files(config):
    """Update all script files with the new configuration"""
    files_to_update = [
        'src/autologin.py',
        'src/fetch_otp.py', 
        'src/imap.py',
        'src/telegram_bot_handler.py',
        'src/fetch_timetable.py',
        'src/fetch_today_classes.py'
    ]
    
    for filename in files_to_update:
        if os.path.exists(filename):
            print(f"📝 Updating {filename}...")
            try:
                with open(filename, 'r') as f:
                    content = f.read()
                
                # Replace SYSTEM_ID
                content = content.replace('SYSTEM_ID = "2023497222"', f'SYSTEM_ID = "{config["SYSTEM_ID"]}"')
                
                # Replace Gmail settings
                content = content.replace('GMAIL_USER = "harshgupta2004@gmail.com"', f'GMAIL_USER = "{config["GMAIL_USER"]}"')
                content = content.replace('GMAIL_PASSWORD = "your-app-password"', f'GMAIL_PASSWORD = "{config["GMAIL_PASSWORD"]}"')
                
                # Replace Telegram settings
                content = content.replace('TELEGRAM_BOT_TOKEN = "7688760570:AAFxql5tfEBIkBvwche2Zj_74zRUuVlS7rY"', f'TELEGRAM_BOT_TOKEN = "{config["TELEGRAM_BOT_TOKEN"]}"')
                content = content.replace('TELEGRAM_CHAT_ID = "6244107851"', f'TELEGRAM_CHAT_ID = "{config["TELEGRAM_CHAT_ID"]}"')
                content = content.replace('AUTHORIZED_CHAT_ID = "6244107851"', f'AUTHORIZED_CHAT_ID = "{config["TELEGRAM_CHAT_ID"]}"')
                
                with open(filename, 'w') as f:
                    f.write(content)
                    
            except Exception as e:
                print(f"⚠️  Warning: Could not update {filename}: {e}")

def make_scripts_executable():
    """Make shell scripts executable"""
    scripts = ['scripts/start_bot.sh', 'scripts/stop_bot.sh', 'scripts/restart_bot.sh']
    for script in scripts:
        if os.path.exists(script):
            os.chmod(script, 0o755)
            print(f"✅ Made {script} executable")

def print_next_steps():
    """Print next steps for the user"""
    print("\n🎉 Setup Complete!")
    print("=" * 30)
    print("\nNext steps:")
    print("1. Test your bot: ./start_bot.sh")
    print("2. Send /start to your bot on Telegram")
    print("3. Try /check to test attendance checking")
    print("4. Try /today to get today's classes")
    print("\nAvailable commands:")
    print("- /start: Welcome message")
    print("- /check: Check attendance")
    print("- /today: Today's classes")
    print("- /timetable: Full timetable")
    print("\nTo stop the bot: ./stop_bot.sh")
    print("To restart: ./restart_bot.sh")

def main():
    print_banner()
    
    if not check_python_version():
        sys.exit(1)
    
    if not install_dependencies():
        sys.exit(1)
    
    config = get_user_input()
    create_config_file(config)
    update_script_files(config)
    make_scripts_executable()
    print_next_steps()

if __name__ == "__main__":
    main()
